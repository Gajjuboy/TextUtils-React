{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","Components/SpeechToText.jsx","App.js","reportWebVitals.js","index.js"],"names":["About","props","react_default","a","createElement","className","concat","classTextColor","id","style","backgroundColor","bgColor","color","textColor","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","classBgColor","dist","to","navbarBrand","aria-label","aria-current","aboutText","speechtotext","onClick","toggleMode","onChange","DarkModeColor","role","aria-checked","htmlFor","placeholder","defaultProps","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","Heading","value","events","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","border","borderColor","borderRadius","height","Alert","alert","width","iconType","href","icon","word","lower","charAt","slice","capatalize","msg","SpeechToText","_useSpeechRecognition","useSpeechRecognition","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","mic","toggleListening","SpeechRecognition","stopListening","startListening","continuous","language","console","log","fontSize","App","mode","setMode","_useState3","_useState4","setAlert","message","setTimeout","speechRecognitionHeading","document","body","Components_Alert","react_router_dist","path","element","Components_TextForm","Components_SpeechToText","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.60dd92cc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: \"black\",\r\n    //     backgroundColor: \"white\"\r\n    // });\r\n\r\n    // const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n    // const toggleStyle = () => {\r\n    //     if (myStyle.color === 'black'){\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: \"1px solid white\"\r\n    //         });\r\n    //         setBtnText(\"Disable Dark Mode\");\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         });\r\n    //         setBtnText(\"Enable Dark Mode\");\r\n\r\n    //     }\r\n    // }\r\n\r\n\r\n  return (\r\n    // <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n    //     <div className=\"accordion-item\" style={myStyle}>\r\n    //         <h2 className=\"accordion-header\" id=\"headingOne\">\r\n    //         <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n    //             Accordion Item #1\r\n    //         </button>\r\n    //         </h2>\r\n    //         <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n    //         <div className=\"accordion-body\">\r\n    //             <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n    //         </div>\r\n    //         </div>\r\n    //     </div>\r\n    //     <div className=\"accordion-item\" style={myStyle}>\r\n    //         <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n    //         <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n    //             Accordion Item #2\r\n    //         </button>\r\n    //         </h2>\r\n    //         <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n    //         <div className=\"accordion-body\">\r\n    //             <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n    //         </div>\r\n    //         </div>\r\n    //     </div>\r\n    //     <div className=\"accordion-item\" style={myStyle}>\r\n    //         <h2 className=\"accordion-header\" id=\"headingThree\">\r\n    //         <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n    //             Accordion Item #3\r\n    //         </button>\r\n    //         </h2>\r\n    //         <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n    //         <div className=\"accordion-body\">\r\n    //             <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n    //         </div>\r\n    //         </div>\r\n    //     </div>\r\n    //     <div className=\"container my-3\">\r\n    //         <button onClick={toggleStyle} type='button' className='btn btn-primary'>{btnText}</button>\r\n    //     </div>\r\n    // </div>\r\n\r\n    <div className={`accordion text-${props.classTextColor}`} id=\"accordionExample\">\r\n        <div className=\"accordion-item\" style={{backgroundColor: props.bgColor, color: props.textColor}}>\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" style={{backgroundColor: props.bgColor, color: props.textColor}} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={{backgroundColor: props.bgColor, color: props.textColor}}>\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" style={{backgroundColor: props.bgColor, color: props.textColor}} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={{backgroundColor: props.bgColor, color: props.textColor}}>\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" style={{backgroundColor: props.bgColor, color: props.textColor}} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            {/* <button onClick={props.toggleMode()} type='button' className='btn btn-primary'>{btnText}</button> */}\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n\r\n  // let bgColor = props.mode==='light'?'white':'grey';\r\n  // let classBgColor = props.mode ==='light'?'light':'dark';\r\n  // let textColor = props.mode ==='light'?'black':'white';\r\n  // let classTextColor = props.mode==='light'?'dark':'white';\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.classBgColor} bg-${props.classBgColor}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <a className=\"navbar-brand\" href=\"#\">\r\n          {props.navbarBrand}\r\n        </a> */}\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.navbarBrand}\r\n        </Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a> */}\r\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/speechtotext\">\r\n                {props.speechtotext}\r\n              </Link>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/thapaspeechrecognition\">\r\n                {props.speechRecognitionHeading}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <div className={`form-check form-switch text-${props.classTextColor} mx-3`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} onChange={props.DarkModeColor} type=\"checkbox\" role=\"switch\" aria-checked id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div> */}\r\n          <div className={`form-check form-switch text-${props.classTextColor} mx-3`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} onChange={props.DarkModeColor} type=\"checkbox\" role=\"switch\" aria-checked id=\"flexSwitchCheckRed\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckRed\">Enable Dark Mode</label>\r\n          </div>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" style={{backgroundColor: props.bgColor, color: props.textColor}} placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    navbarBrand : PropTypes.string.isRequired,\r\n    aboutText : PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    navbarBrand : 'Brand Name Here',\r\n    aboutText : 'about'\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TextForm(props) {\r\n  \r\n  //UpperCase Button\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\");\r\n    const newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to upper case\", \"success\", \"#check-circle-fill\", \"success:\");\r\n  };\r\n  //LowerCase Button\r\n  const handleLowClick = () => {\r\n    // console.log(\"Lowercase was clicked\");\r\n    const newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lower case\", \"success\", \"#check-circle-fill\", \"success:\");\r\n  };\r\n  // Clear text button\r\n  const handleClearClick = () => {\r\n    // console.log(\"Clear was clicked\");\r\n    const newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared\", \"success\", \"#check-circle-fill\", \"success:\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    // let copiedText = document.getElementById(\"exampleFormControlTextarea1\")\r\n    // copiedText.select();\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Copied to clipboard\", \"success\", \"#check-circle-fill\", \"success:\");\r\n  }\r\n\r\n  const handleExtraSpaces = () => {\r\n    const newText = text.split(/[ ] + /);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces have been removed\", \"success\", \"#check-circle-fill\", \"success:\");\r\n  }\r\n\r\n  const handleOnChange = (events) => {\r\n    // console.log(\"on Change\");\r\n    setText(events.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // console.log(text.split(\"\").length);\r\n  return (\r\n    <>\r\n      <div className={`container text-${props.classTextColor}`}> \r\n         <h1>{props.Heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"></label>\r\n          <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" style={{backgroundColor: props.bgColor, color: props.textColor}} placeholder=\"Enter your Text:\" value={text} onChange={handleOnChange} rows=\"8\"></textarea>\r\n        </div>\r\n        <div className=\"buttons d-flex\">\r\n        <button className=\"btn btn-primary\" disabled = {text.length===0} onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button className=\"btn btn-primary\" disabled = {text.length===0} onClick={handleLowClick}>Convert to Lowercase</button>\r\n        <button className=\"btn btn-primary\" disabled = {text.length===0} onClick={handleClearClick}>Clear Text</button>\r\n        <button className=\"btn btn-primary\" disabled = {text.length===0} onClick={handleCopy}>Copy Text</button>\r\n        <button className=\"btn btn-primary\" disabled = {text.length===0} onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={`container my-3 text-${props.classTextColor}`}>\r\n        <h2>Your text summary</h2>\r\n        <p>{(text.split(\" \").length -1)} Words and {text.length} Characters</p>\r\n        <p>{0.008 * text.split(\" \"+ 1).length} Minutes to read</p>\r\n      </div>\r\n      <div className={`container my-3 previewText text-${props.classTextColor}`} style={{border: `1px solid ${props.borderColor}`, borderRadius: '8px', height:'250px'}}>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter Something above to get a preview here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TextForm;\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n  const capatalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    // console.log((lower.charAt(0).toUpperCase() + lower.slice(1)));\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n  }\r\n  return (\r\n    <div style={{height:'50px'}}>\r\n     {props.alert &&<div className={`alert alert-${props.alert.type} d-flex align-items-center`} style={{height: \"50px\"}} role=\"alert\">\r\n        <svg className=\"bi flex-shrink-0 me-2\" style={{width: \"2rem\", height: \"50px\"}} role=\"img\" aria-label={`${props.alert.iconType}`}><use href={`${props.alert.icon}`}/></svg> {/**/}\r\n        <div>\r\n            <strong>{capatalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    </div>}\r\n    </div>\r\n  ) \r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from \"react\";\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\n\r\n\r\n\r\nfunction SpeechToText(props) {\r\n  \r\n  //UpperCase Button\r\n  // const handleUpClick = () => {\r\n  //   // console.log(\"Uppercase was clicked\");\r\n  //   const newText = text.toUpperCase();\r\n  //   setText(newText);\r\n  //   props.showAlert(\"Converted to upper case\", \"success\", \"#check-circle-fill\", \"success:\");\r\n  // };\r\n\r\n  const handleOnChange = (events) => {\r\n    // console.log(\"on Change\");\r\n    setText(events.target.value);\r\n  };\r\n\r\n  // const [notice, setNotice] = useState(notice)\r\n  // const recordMsg = (message, type, icon, iconType) => {\r\n  //   setNotice({\r\n  //     msg: message,\r\n  //     type: type,\r\n  //     icon: icon, /* use \"#info-fill\" ,\"check-circle-fill\" for success, \"#exclamation-triangle-fill\" for warning alert, \"#exclamation-triangle-fill\" for danger,  */\r\n  //     iconType: iconType \r\n  //   })\r\n  //   setTimeout(() => {\r\n  //     setNotice(null)\r\n  //   },1500);\r\n  // }\r\n\r\n\r\n  // function Alert(notice) {\r\n\r\n  //   const capatalize = (word) => {\r\n  //     const lower = word.toLowerCase();\r\n  //     // console.log((lower.charAt(0).toUpperCase() + lower.slice(1)));\r\n  //     return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n  //   }\r\n  //   return (\r\n  //     <div style={{height:'50px'}}>\r\n  //      {notice &&<div className={`alert alert-${notice.type} d-flex align-items-center`} style={{height: \"50px\"}} role=\"alert\">\r\n  //         <svg className=\"bi flex-shrink-0 me-2\" style={{width: \"2rem\", height: \"50px\"}} role=\"img\" aria-label={`${notice.iconType}`}><use href={`${notice.icon}`}/></svg> {/**/}\r\n  //         <div>\r\n  //             <strong>{capatalize(notice.type)}</strong>: {notice.msg}\r\n  //         </div>\r\n  //     </div>}\r\n  //     </div>\r\n  //   ) \r\n  // }\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // console.log(text.split(\"\").length);\r\n\r\n  //Setting Up Speech Recognition\r\n    const {\r\n      transcript,\r\n      listening,\r\n      resetTranscript,\r\n      browserSupportsSpeechRecognition\r\n    } = useSpeechRecognition();\r\n  \r\n    // console.log(useSpeechRecognition)\r\n    if (!browserSupportsSpeechRecognition) {\r\n      return <span>Browser doesn't support speech recognition.</span>;\r\n    }\r\n\r\n  const mic = listening ? 'Stop Listening': 'Start Listening'\r\n\r\n  const startListening =  () => SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n\r\n  const toggleListening = (listening)=>{\r\n    if(listening){\r\n      props.showAlert(\"Recording Stopped\", 'success', 'check-circle-fill', 'success:')\r\n      SpeechRecognition.stopListening();\r\n    }else{\r\n      props.showAlert(\"Recording Started\", \"success\", \"check-circle-fill\", \"success:\")\r\n      resetTranscript();\r\n      startListening();\r\n    }\r\n  }\r\n  console.log(transcript)\r\n\r\n  return (\r\n    <>\r\n      <div className={`container text-${props.classTextColor}`}> \r\n         <h1>{props.Heading}</h1>\r\n         <p>Microphone: {listening? 'ON' : 'OFF'}</p>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"></label>\r\n          <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" style={{backgroundColor: props.bgColor, color: props.textColor, fontSize:\"3em\"}} placeholder=\"Enter your Text:\" value={transcript} onChange={handleOnChange} rows=\"8\"></textarea>\r\n        </div>\r\n        <div className=\"buttons d-flex\">\r\n        <button className=\"btn btn-primary\" onClick={() => toggleListening(listening)}>Microphone: {listening? 'ON': 'OFF'} {mic}</button>\r\n        {/* <button className=\"btn btn-primary\" onClick={()=>{props.callback(toggleListening)}}>Microphone: {listening? 'ON': 'OFF'} {mic}</button> */}\r\n        {/* <button className=\"btn btn-primary\" onClick={SpeechRecognition.startListening}>Start Listening</button> */}\r\n        {/* <button className=\"btn btn-primary\" onClick={SpeechRecognition.stopListening}>Stop Listening</button> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className={`container my-3 text-${props.classTextColor}`}>\r\n        <h2>Your text summary</h2>\r\n        <p>{(text.split(\" \").length -1)} Words and {text.length} Characters</p>\r\n        <p>{0.008 * text.split(\" \"+ 1).length} Minutes to read</p>\r\n      </div>\r\n      <div className={`container my-3 previewText text-${props.classTextColor}`} style={{border: `1px solid ${props.borderColor}`, borderRadius: '8px', height:'250px'}}>\r\n        <h2>Preview</h2>\r\n        {/* <p>{text.length>0?text:\"Enter Something above to get a preview here\"}</p> */}\r\n        <p>{transcript.length>0?transcript: \"Please Speak or Enter Something to preview here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SpeechToText;\r\n","import './App.css';\r\nimport About from './Components/About';\r\nimport Navbar from \"./Components/Navbar\"; \r\nimport TextForm from \"./Components/TextForm\";\r\nimport React, {useState} from \"react\";\r\nimport Alert from \"./Components/Alert\";\r\nimport SpeechToText from \"./Components/SpeechToText\";\r\n// import ThapaSpeechRecognition from \"./Components/ThapaSpeechRecognition\"\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n} from \"react-router-dom\";\r\n// import { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nfunction App() {\r\n  /*Dark Mode State Variable */\r\n  const [mode, setMode] = useState('light'); // whether  dark mode is enabled or not...\r\n\r\n  /*Color Variables */\r\n  let bgColor = mode==='light'?'white':'#141414';\r\n  let classBgColor = mode ==='light'?'light':'dark';\r\n  let textColor = mode ==='light'?'black':'white';\r\n  let classTextColor = mode==='light'?'dark':'light';\r\n  let borderColor = mode==='light'?'#e2e9ed':'white';\r\n\r\n\r\n  /*Dark Mode Button */\r\n  const toggleMode = () => {\r\n    if (mode==='light') {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#141414';\r\n      showAlert(\"Dark mode has been Enabled\", \"success\", \"#check-circle-fill\", \"success:\"); \r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Dark mode has been Disabled\", \"success\", \"#check-circle-fill\", \"success\");\r\n    }\r\n    // darkModeColor();\r\n  }\r\n\r\n  // const darkModeColor = () => {\r\n  //   let black = document.getElementById(\"flexSwitchCheckDefault\");\r\n  //   let red = document.getElementById(\"flexSwitchCheckRed\");\r\n  //   if(black.getAttribute('checked')=== 'true'){\r\n  //     red.setAttribute('checked', 'false');\r\n  //   }\r\n  //   else if(red.getAttribute('checked')=== 'true'){\r\n  //     black.setAttribute('checked', 'false');\r\n\r\n  //   }\r\n  // }\r\n\r\n\r\n  /*Alert State Variable*/\r\n  const [alert, setAlert] = useState(null);\r\n  /*Alert show method */\r\n  const showAlert = (message, type, icon, iconType) => {\r\n    // if(callback){\r\n      \r\n    // }else{\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n      icon: icon, /* use \"#info-fill\" ,\"check-circle-fill\" for success, \"#exclamation-triangle-fill\" for warning alert, \"#exclamation-triangle-fill\" for danger,  */\r\n      iconType: iconType \r\n    })\r\n      setTimeout(() => {\r\n        setAlert(null)\r\n      }, 1500);\r\n    // }\r\n  }\r\n\r\n  // const {listening} = useSpeechRecognition()\r\n\r\n  // const callback = (toggleListening)=>{\r\n  //   toggleListening(listening);\r\n  //   // console.log('callback called')\r\n  // }\r\n\r\n  /* Main DOM */\r\n  return (\r\n    <>\r\n    <Router>\r\n      <Navbar navbarBrand='TextUtils' aboutText='About US' speechtotext='Speech To Text Converter' speechRecognitionHeading='Thapa Speech Recognition' mode={mode} toggleMode={toggleMode} bgColor={bgColor} classBgColor={classBgColor} classTextColor={classTextColor} textColor={textColor} />\r\n      <Alert alert={alert} /> \r\n      <div className='container my-3'>\r\n        <Routes>\r\n            <Route path='about' element={<About bgColor={bgColor} classBgColor={classBgColor} classTextColor={classTextColor} textColor={textColor} borderColor={borderColor} showAlert={showAlert}/> } />\r\n              \r\n\r\n            <Route path='/' element={<TextForm Heading=\"Enter the text to analyze:\" bgColor={bgColor} classBgColor={classBgColor} classTextColor={classTextColor} textColor={textColor} borderColor={borderColor} showAlert={showAlert}/>} />\r\n            <Route path='SpeechToText' element={<SpeechToText Heading=\"Speak to convert into text:\" bgColor={bgColor} classBgColor={classBgColor} classTextColor={classTextColor} textColor={textColor} borderColor={borderColor} showAlert={showAlert}/>} />\r\n            {/* <Route path='ThapaSpeechRecognition' element={<ThapaSpeechRecognition />} /> */}\r\n          </Routes>\r\n          {/* <TextForm Heading=\"Enter the text to analyze:\" bgColor={bgColor} classBgColor={classBgColor} classTextColor={classTextColor} textColor={textColor} borderColor={borderColor} showAlert={showAlert}/> */}\r\n      </div>\r\n    </Router>\r\n</>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}